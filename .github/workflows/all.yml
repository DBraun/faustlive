name: faustlive

env:
  FAUSTLIVE_VERSION: 2.5.15
  FAUST_VERSION: 2.59.2

# Controls when the action will run.
on:
  push:
    tags:
    - '*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      create_release:
        type: boolean
        description: Create a draft release
        default: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

build-macos:
    strategy:
      fail-fast: false
      matrix:
        include:
          # - name: arm64
          #   os: macos-11
          #   libfaust-url:
          #   ARCHS: "-arch arm64"
          #   CMAKE_OSX_ARCHITECTURES: arm64
          #   HOST: aarch64-apple-darwin
          - name: x64
            os: macos-11
            libfaust-url: https://github.com/DBraun/TD-Faust/releases/download/llvm-15.0.7-macos10.15-x86_64/Faust-2.59.2-x64.dmg
            ARCHS: "-arch x86_64"
            CMAKE_OSX_ARCHITECTURES: x86_64
            HOST: x86_64-apple-darwin

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Build libmicrohttpd
      run: |
        curl -L https://mirrors.sarata.com/gnu/libmicrohttpd/libmicrohttpd-0.9.76.tar.gz -o libmicrohttpd-0.9.76.tar.gz
        tar -xvf libmicrohttpd-0.9.76.tar.gz
        mv libmicrohttpd-0.9.76 libmicrohttpd
        cd libmicrohttpd
        export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
        export TARGET=${{matrix.HOST}}
        export CC=$(xcrun -find -sdk macosx gcc)
        export CFLAGS="${{matrix.ARCHS}} -target $TARGET -isysroot $SDKROOT"
        export LDFLAGS="${{matrix.ARCHS}} -target $TARGET -isysroot $SDKROOT"
        ./configure --enable-https=no --host=$TARGET --prefix=$PWD/libmicrohttpd
        make && make install

    - name: Brew install requirements (arm64)
      if: ${{ endsWith( matrix.name, 'arm64') }}
      # todo: should we bother with brew update?
      run: |
        brew update
        PACKAGES=(ncurses gtk+ qt@5 liblo lame flac libogg libtool libvorbis opus mpg123)
        DEPS=($(brew deps --union --topological $(echo $PACKAGES) | tr '\n' ' '))
        PACKAGES=("${DEPS[@]}" "${PACKAGES[@]}")
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        export HOMEBREW_NO_INSTALL_UPGRADE=1
        export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
        for PACKAGE in "${PACKAGES[@]}"
        do
          echo "Fetching bottle: $PACKAGE"
          response=$(brew fetch --bottle-tag=arm64_big_sur $PACKAGE 2>&1)
          package_path=$(echo $response | sed -n 's/.*\:\ \(.*\.tar\.gz\).*/\1/p')
          package_path=$(echo "$package_path" | xargs)
          echo "Package Path: $package_path"
          brew reinstall --verbose --force-bottle "$package_path" || true
        done

        brew uninstall --ignore-dependencies curl git || true

    - name: Brew install requirements (x64)
      if: ${{ endsWith( matrix.name, 'x64') }}
      run: brew install pkg-config ncurses gtk+ qt@5 liblo lame flac libogg libtool libvorbis opus mpg123

    - name: Download Faust
      run: |
        curl -L ${{ matrix.libfaust-url }} -o libfaust.dmg
        hdiutil attach libfaust.dmg
        mkdir -p libfaust
        cp -R /Volumes/Faust-${{env.FAUST_VERSION}}/Faust-${{env.FAUST_VERSION}}/* libfaust/
        hdiutil detach /Volumes/Faust-${{env.FAUST_VERSION}}/

    - name: Clone Libsndfile
      uses: actions/checkout@v3
      with:
        repository: libsndfile/libsndfile
        path: libsndfile
        submodules: true

    - name: Build libsndfile
      # Note that can't use the libsndfile from brew because it lacks libsndfile.a, the static lib.
      run: |
        brew uninstall --ignore-dependencies libsndfile || true
        cd libsndfile
        LIBSNDFILE_INSTALL_PREFIX="$PWD/install"
        mkdir CMakeBuild && cd CMakeBuild
        cmake .. -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$LIBSNDFILE_INSTALL_PREFIX" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_OSX_ARCHITECTURES=$CMAKE_OSX_ARCHITECTURES -DCMAKE_OSX_DEPLOYMENT_TARGET=$CMAKE_OSX_DEPLOYMENT_TARGET -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF -DBUILD_TESTING=OFF
        make && make install
        export PKG_CONFIG_PATH="$LIBSNDFILE_INSTALL_PREFIX/lib/pkgconfig"
      env:
        CMAKE_OSX_ARCHITECTURES: ${{matrix.CMAKE_OSX_ARCHITECTURES}}

    - name: Build everything
      # todo: do we need to specify the qt@5 path for PKG_CONFIG_PATH?
      run: |
        export FAUST=$PWD/libfaust/bin/faust
        export FAUST_PATH_IS_ABSOLUTE=1
        export BUILD_HTTP_STATIC=ON
        export USE_STATIC_SNDFILE=1
        export PKG_CONFIG_PATH="/usr/local/opt/qt@5/lib/pkgconfig:$PWD/libsndfile/install/lib/pkgconfig:$PWD/libmicrohttpd/libmicrohttpd/lib/pkgconfig"
        export CMAKEOPT="-DCMAKE_OSX_ARCHITECTURES="$CMAKE_OSX_ARCHITECTURES" -DCMAKE_OSX_DEPLOYMENT_TARGET=$CMAKE_OSX_DEPLOYMENT_TARGET -DCMAKE_BUILD_TYPE=Release"

        cd build
        make release
      env:
        CMAKE_OSX_ARCHITECTURES: ${{matrix.CMAKE_OSX_ARCHITECTURES}}
        ARCHS: ${{matrix.ARCHS}}

    - name: Upload FaustLive artifact
      uses: actions/upload-artifact@v3
      with:
        name: FaustLive-${{env.FAUSTLIVE_VERSION}}-${{ matrix.name }}.dmg
        path: build/FaustLive-${{env.FAUSTLIVE_VERSION}}-${{matrix.name}}.dmg
        if-no-files-found: error

  build-windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: win64
            os: windows-2022
            libsndfile-url: https://github.com/libsndfile/libsndfile/releases/download/1.2.0/libsndfile-1.2.0-win64.zip
            libfaust-url: https://github.com/DBraun/TD-Faust/releases/download/llvm-15.0.7-win11-x86_64/Faust-2.59.5-win64.exe

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    
    - uses: ilammy/msvc-dev-cmd@v1

    - name: Install Qt
      # note that this sets the environment var Qt5_DIR
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        dir: '${{ github.workspace }}/'
        install-deps: 'true'
        cache: 'false'
        cache-key-prefix: 'install-qt-action'
        setup-python: 'true'
        tools: 'tools_ifw tools_qtcreator,qt.tools.qtcreator'
        set-env: 'true'
        tools-only: 'false'
        aqtversion: '==3.1.*'
        py7zrversion: '==0.20.*'
        extra: '--external 7z'

    - name: Download Libsndfile
      run: |
        curl -L ${{ matrix.libsndfile-url }} -o libsndfile.zip
        7z x libsndfile.zip -y
        mv libsndfile-1.2.0-win64 libsndfile

    - name: Download Faust
      run: |
        curl -L ${{ matrix.libfaust-url }} -o libfaust.zip
        7z x libfaust.zip -y -olibfaust

    - name: Build FaustLive
      shell: cmd
      run: |
        set PATH=%LLVM_DIR%;%FAUST_DIR%;%PATH%
        set Qt5_DIR=%Qt5_Dir%/lib/cmake/Qt5
        cd Build
        call Make.bat faustlive
        call Make.bat package
      env:
        LLVM_DIR: ${{ github.workspace }}/llvm/bin
        LIBSNDFILE: ${{ github.workspace }}/libsndfile
        FAUST_DIR: ${{ github.workspace }}/libfaust/bin

    - name: Upload FaustLive installer
      uses: actions/upload-artifact@v3
      with:
        name: FaustLive-${{env.FAUSTLIVE_VERSION}}-${{matrix.name}}.exe
        path: Build/FaustLive-${{env.FAUSTLIVE_VERSION}}-${{matrix.name}}.exe
        if-no-files-found: error

  create-release:
    if: ${{ startsWith(github.ref, 'refs/tags/v') && inputs.create_release }} 
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    name: "Create Release on GitHub"
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: "dist"

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true